<#
.SYNOPSIS
    Imports SCOM User Roles using configuration based on the output of Export-SCOMUserRole
.DESCRIPTION
    This cmdlet takes the input from the Export-SCOMUserRole cmdlet, in the form of .XML.

    It then checks to see if the user role already exists, doesn't conflict with the existing profile and creates the role.
    It will append or overwrite existing user role scope depending on the $Overwrite Parameter (default is $false)

    Built in System Roles will not be ammended.
    Only the following Profiles wil be ammended:  "Author" , "AdvancedOperator" , "Operator" , "ReadOnlyOperator"

    If the Object, View that is being scoped within this role doesn't exist, then a warning message will notify you as it cannot be found

    See NOTES for the XML format
.EXAMPLE
    Example 1
    
    PS C:\> Import-SCOMUserRoles -FilePath = "C:\temp\userroles.xml" -Overwrite $true
    Imports the userrole.xml, generated by Export-SCOMUserRole and overwrites any existing configuration of the scope
.INPUTS
    .xml
.OUTPUTS
    [Microsoft.EnterpriseManagement.Security.UserRole[]]
.NOTES
    Input .xml format exmple

    The following attributes are not used for the Import-SCOMUserRole:
    
    <UserRole Id ="">   
    <UserRole ImpliedInstance="">   
    <ManagementGroup Id="">   
    <ManagementGroup Name="">   
    <Scope ScopeId="">   
    <Scope IsScopedFixed="">   

    and the following elements for each scope type:

    <DisplayName>
    <ManagementPackDisplayName>
    <Id>

    These are all used for configuration capture and to make the User roles readable. They are not required by the Import-SCOMUserRole, but are generated by the Export-SCOMUserrole
    
    If Cloning roles, ammed the following attributes and parameters

    <UserRole Name="">           This must be unique within a Management Group
    <UserRole IsSystem="">       This must be "False"
    <UserRole Profile="">        This can be changed to one of the following: "Author" , "AdvancedOperator" , "Operator" , "ReadOnlyOperator". Other Profiles have not been tested using this script
    <UserRole DisplayName="">    This is how the profile will look in the Console


    <?xml version="1.0" encoding="UTF-8"?>
    <UserRoles>
        <UserRole Name="Final Operator" Id="4abb669b-8cd6-4e38-b74d-7dbb33db8787" IsSystem="False" Profile="Operator" ImpliedInstanceId="">
            <DisplayName>Final Operator</DisplayName>
            <Description>
            </Description>
            <ManagementGroup Id="6063d62d-91e2-604c-d06c-e4d35801a8aa" Name="Contoso-MG1" />
            <Scope ScopeId="9" IsScopeFixed="False">
            <Objects>
                <Object Name="Microsoft.Windows.Cluster.NodeRole.Group" ManagementPackName="Microsoft.Windows.Cluster.Management.Library" ManagementPackVersion="10.1.0.0">
                <DisplayName>Cluster Roles</DisplayName>
                <ManagementPackDisplayName>Windows Cluster Management Library</ManagementPackDisplayName>
                <Id>ff95b717-0883-3777-f3dd-160627395c69</Id>
                </Object>
            </Objects>
            <Classes />
            <Views>
                <View Name="Microsoft.Linux.NetworkAdapter.Health.DashboardView" ManagementPackName="Microsoft.Linux.Library" ManagementPackVersion="7.5.1070.0" Second="False">
                <DisplayName>Network Adapter Health</DisplayName>
                <ManagementPackDisplayName>Linux Operating System Library</ManagementPackDisplayName>
                <Id>03178a99-fa14-94db-5f7d-0026a99bfa11</Id>
                </View>
            </Views>
            <NonCredentialTasks>
                <NonCredentialTask Name="Microsoft.Windows.Server.AD.DomainController.DCDIAG" ManagementPackName="Microsoft.Windows.Server.AD.2016.Monitoring" ManagementPackVersion="10.0.0.0" Second="False">
                <DisplayName>DCDIAG</DisplayName>
                <ManagementPackDisplayName>Active Directory Domain Services for Microsoft Windows Server 2016 (Monitoring)</ManagementPackDisplayName>
                <Id>b7d29cac-a806-0b58-be4c-0e36ed8d8242</Id>
                </NonCredentialTask>
            </NonCredentialTasks>
            <CredentialTasks>
            </CredentialTasks>
            <ConsoleTasks>
                <ConsoleTask Name="" ManagementPackName="" ManagementPackVersion="">
                <DisplayName>All Console Tasks Automatically Approved</DisplayName>
                <ManagementPackDisplayName>
                </ManagementPackDisplayName>
                <Id>563c11f8-3ec9-4a92-a89f-df7b7a533d69</Id>
                </ConsoleTask>
            </ConsoleTasks>
            <Templates>
            </Templates>
            <DashboardReferences>
                <DashboardReference Name="Microsoft.SystemCenter.OperationsManager.ViewFolder.Root.SCOMTrendDashboard" ManagementPackName="Microsoft.SystemCenter.OperationsManager.SummaryDashboard" ManagementPackVersion="7.2.12213.0">
                <DisplayName>Management Group Health Trend</DisplayName>
                <ManagementPackDisplayName>Microsoft SystemCenter OperationsManager Summary Dashboard</ManagementPackDisplayName>
                <Id>da19a29a-a198-bc89-6c5b-02d50ee1ba1d</Id>
                </DashboardReference>
            </DashboardReferences>
            </Scope>
            <Users>
            <User>Contoso\JWilliams</User>
            <User>Contoso\TMiller</User>
            </Users>
        </UserRole>
    </UserRoles>

#>
function Import-SCOMUserRole {
    Param(
        [CmdletBinding()]
        [Parameter(Mandatory = $true)]
        [String]
        $FilePath,

        [bool]
        $Overwrite = $false
    )

    function createCommonPairType {
        Param ([Guid]$First, [Bool]$Second)
        $GenericType = ("Microsoft.EnterpriseManagement.Common.Pair" + '`' + "2") -as "Type"
        [type[]]$TypedParameters = “System.Guid”, ”System.Boolean”
        $PairType = $GenericType.MakeGenericType($TypedParameters)

        [Activator]::CreateInstance($PairType, ($First, $Second))
    }

    function createStringListType {
        New-Object System.Collections.Generic.List[System.String]
    }

    function createGenericArrayType {
        New-Object System.Collections.ArrayList
    }
    
    function createGUIDListType {
        New-Object System.Collections.Generic.List[System.String]
    }

    function newSCOMManagementGroupConnection {
        Param(
        
            [AllowNull()]
            $ManagementServer = $null
        )
        #Import the OperationsManager module
        If (!(Get-Module OperationsManager)) {
            Try {
                $SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
                $SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager" -ErrorAction Stop
                Import-module $SCOMModulePath -ErrorAction Stop
                #[Reflection.Assembly]::LoadWithPartialName("Microsoft.EnterpriseManagement.Core") |Out-Null
                #[Reflection.Assembly]::LoadWithPartialName("Microsoft.EnterpriseManagement.Packaging")|Out-Null
            }
            Catch {
                Try {
                    Import-Module OperationsManager -ErrorAction Stop
                }
                Catch {
                    Write-Error "$ScriptName : Failed to Load the Operations Manager Module. Ending Script"
                    Exit
                }
            }
        }

        #Connect to SCOM Management Group    
        If ($ManagementServer -like $Null) {
            $Wmi = Get-WmiObject win32_ComputerSystem
            $ManagementServer = "$($Wmi.Name).$($Wmi.Domain)"
            Write-Verbose "$ScriptName : newSCOMManagementGroupConnection: ManagementServer Parameter not provided. Set as - $ManagementServer"
        }
        If ((Get-SCOMManagementGroupConnection -ComputerName $ManagementServer).IsActive -ne $True) {
            Try {
                New-SCOMManagementGroupConnection $ManagementServer -ErrorAction Stop
            }
            Catch {
                $ErrorString = "Failed to Connect to SCOM Management Server: $ManagementServer"
                Write-error $ErrorString
                Exit
            }
        }
        New-Object Microsoft.EnterpriseManagement.ManagementGroup($ManagementServer)
    }

    function getSCOMUserRoleExportedConfig {
        param (
            $FilePath
        )
        $Test = Test-Path -Path $FilePath 
    
        If ($Test -eq $true) {
            $Item = Get-Item -Path $FilePath

            Write-Verbose "$ScriptName : getSCOMUserRoleExportedConfig: $($Item.Extension) File Found"
            $ErrorMessage = "File Type for `'$FilePath`' is not .json or .xml.`nEndingScript"
            switch ($Item.Extension) {
                '.json' { importJSONFile -FilePath $FilePath }
                '.xml' { importXMLFile -FilePath $FilePath }
                Default {
                    Write-Error -Message $ErrorMessage 
                    Exit
                }
            }
        }
        Else {
            $ErrorMessage = "File `'$FilePath`' is not valid.`nEndingScript"
            Write-Error -Message $ErrorMessage
            Exit
        }
    }

    #### Import XML ####
        
    function importXMLFile {
        Param ($FilePath)
        Write-Verbose "$ScriptName : importXMLFile: Importing $FilePath"

        $ImportedXML = [xml](Get-Content $FilePath) 

        importXMLUserRoles -ImportedXML $ImportedXML
    }

    function importXMLUserRoles {
        param (
            $ImportedXML
        )
        $Count = 0
        Foreach ($UserRole in $ImportedXML.UserRoles.UserRole) { $Count ++ }
        Write-Verbose "$ScriptName : importXMLUserRoles: `"$Count`" UserRoles Found"
        If ($Count -lt 1) {
            Write-Error "$ScriptName : importXMLUserRoles: No UserRoles Found!"
            Exit
        }
        Else {
            Foreach ($UserRole in $ImportedXML.UserRoles.UserRole) {      
                importXMLUserRoleConfiguration -UserRole $UserRole
            }
        }
    }

    function importXMLUserRoleConfiguration {
        param (
            $UserRole
        )
        New-Object PSObject -Property @{
            Name              = $UserRole.Name 
            DisplayName       = $UserRole.DisplayName 
            Description       = $UserRole.Description 
            Id                = $UserRole.Id 
            IsSystem          = $UserRole.IsSystem  
            IsScopeFixed      = $UserRole.Scope.IsScopeFixed  
            ScopeId           = $UserRole.Scope.ScopeId
            ImpliedInstanceId = $UserRole.ImpliedInstanceId  
            
            Scope             = importXMLUserRoleScope -Scope $UserRole.Scope 
            Profile           = $UserRole.Profile
            Users             = importXMLUserRoleUsers -Users $UserRole.Users
            ManagementGroup   = $UserRole.ManagementGroup.Name
            ManagementGroupId = $UserRole.ManagementGroup.Id
        }
    }
    
    function importXMLUserRoleScope {
        param (
            $Scope
        )
        New-Object PSObject -Property @{
            Objects             = importXMLUserRoleScopeObjects -Scope $Scope
            Classes             = importXMLUserRoleScopeClasses -Scope $Scope
            Views               = importXMLUserRoleScopeViews -Scope $Scope
            NonCredentialTasks  = importXMLUserRoleScopeNonCredentialTasks -Scope $Scope
            CredentialTasks     = importXMLUserRoleScopeCredentialTasks -Scope $Scope
            ConsoleTasks        = importXMLUserRoleScopeConsoleTasks -Scope $Scope 
            Templates           = importXMLUserRoleScopeTemplates -Scope $Scope 
            DashboardReferences = importXMLUserRoleScopeDashboardReferences -Scope $Scope 
        }
    }
    
    function importXMLUserRoleScopeObjects {
        param (
            $Scope
        )
        
        Foreach ($Obj in $Scope.Objects.Object) {
            New-Object PSObject -Property @{
                Id                    = $Obj.Id
                Name                  = $Obj.Name
                ManagementPackName    = $Obj.ManagementPackName
                ManagementPackVersion = $Obj.ManagementPackVersion
            }
        }
    }

    function importXMLUserRoleScopeClasses {
        param (
            $Scope
        )
        
        Foreach ($Obj in $Scope.Classes.Class) {
            New-Object PSObject -Property @{
                Id                    = $Obj.Id
                Name                  = $Obj.Name
                ManagementPackName    = $Obj.ManagementPackName
                ManagementPackVersion = $Obj.ManagementPackVersion
            }
        }
    }

    function importXMLUserRoleScopeViews {
        param (
            $Scope
        )
        
        Foreach ($Obj in $Scope.Views.View) {
            New-Object PSObject -Property @{
                Id                    = $Obj.Id
                Name                  = $Obj.Name
                ManagementPackName    = $Obj.ManagementPackName
                ManagementPackVersion = $Obj.ManagementPackVersion
                Second                = $Obj.Second
            }
        }
    }

    function importXMLUserRoleScopeNonCredentialTasks {
        param (
            $Scope
        )
        
        Foreach ($Obj in $Scope.NonCredentialTasks.NonCredentialTask) {
            New-Object PSObject -Property @{
                Id                    = $Obj.Id
                Name                  = $Obj.Name
                ManagementPackName    = $Obj.ManagementPackName
                ManagementPackVersion = $Obj.ManagementPackVersion
                Second                = $Obj.Second
            }
        }
    }

    function importXMLUserRoleScopeCredentialTasks {
        param (
            $Scope
        )
        
        Foreach ($Obj in $Scope.CredentialTasks.CredentialTask) {
            New-Object PSObject -Property @{
                Id                    = $Obj.Id
                Name                  = $Obj.Name
                ManagementPackName    = $Obj.ManagementPackName
                ManagementPackVersion = $Obj.ManagementPackVersion
                Second                = $Obj.Second
            }
        }
    }

    function importXMLUserRoleScopeConsoleTasks {
        param (
            $Scope
        )
        
        Foreach ($Obj in $Scope.ConsoleTasks.ConsoleTask) {
            New-Object PSObject -Property @{
                Id                    = $Obj.Id
                Name                  = $Obj.Name
                ManagementPackName    = $Obj.ManagementPackName
                ManagementPackVersion = $Obj.ManagementPackVersion
            }
        }
    }

    function importXMLUserRoleScopeTemplates {
        param (
            $Scope
        )
        
        Foreach ($Obj in $Scope.Templates.Template) {
            New-Object PSObject -Property @{
                Id                    = $Obj.Id
                Name                  = $Obj.Name
                ManagementPackName    = $Obj.ManagementPackName
                ManagementPackVersion = $Obj.ManagementPackVersion
            }
        }
    }

    function importXMLUserRoleScopeDashboardReferences {
        param (
            $Scope
        )
        
        Foreach ($Obj in $Scope.DashboardReferences.DashboardReference) {
            New-Object PSObject -Property @{
                Id                    = $Obj.Id
                Name                  = $Obj.Name
                ManagementPackName    = $Obj.ManagementPackName
                ManagementPackVersion = $Obj.ManagementPackVersion
            }
        }
    }

    function importXMLUserRoleUsers {
        param (
            $Users
        )

        $Output = createStringListType
        Foreach ($User in $Users.User) {
            $Output.Add($User)
        }
        $Output
    }

    ### Import XML End ####

    function importSCOMUserRoles {
        param (
            $ImportedRoles
        )
        $Count = 0
        $ImportedRoles | Foreach-Object { $Count++ }
        Write-Verbose "$ScriptName : importSCOMUserRoles: Importing Configuration for $($Count) User Roles "

        $i = 1       
        Foreach ($ImportedRole in $ImportedRoles) {
            Write-Progress -Activity "Importing UserRoles" -Status "$i of $($Count) $($ImportedRole.DisplayName)" -PercentComplete ($i / $Count * 100)
            validateSCOMUserRole $ImportedRole
            $i++
        }
        Write-Progress -Activity "Importing UserRoles" -Completed
    }

    function validateSCOMUserRole {
        param (
            $ImportedRole
        )
        $Valid = 0

        $ValidProfiles = "Author" , "AdvancedOperator" , "Operator" , "ReadOnlyOperator"
        If ($ValidProfiles -iContains $ImportedRole.Profile) {
            Write-Verbose "$ScriptName : validateSCOMUserRole: Valid Profile `"$($ImportedRole.Profile)`" for User Role `"$($ImportedRole.Name)`""
        }
        else {
            $Valid++
            Write-Warning "$ScriptName : validateSCOMUserRole: Invalid Profile `"$($ImportedRole.Profile)`" for User Role `"$($ImportedRole.Name)`". User Role will not be processed"
        } 
        
        # Check to see if it exists
        If ($UserRoleHash.($ImportedRole.Name)) {
            Write-Verbose "$ScriptName : validateSCOMUserRole: User Role found - `"$($UserRoleHash.($ImportedRole.Name).DisplayName)`"" 
            $Create = $False
        }
        else {
            Write-Verbose "$ScriptName : validateSCOMUserRole: User Role not found - `"$($ImportedRole.Name)`"" 
            $Create = $True
        }
        
        # Check to see if the exising role is builtin
        If ($UserRoleHash.($ImportedRole.Name).IsSystem -like $True) {
            Write-Warning "$ScriptName : validateSCOMUserRole: Built In User Role `"$($ImportedRole.Name)`". User Role will not be processed"
            $Valid++
        }

        # Check to see if the existing role conflicts with the profile
        If ($UserRoleHash.($ImportedRole.Name).Profile -eq $ImportedRole.Profile ) {
            Write-Warning "$ScriptName : validateSCOMUserRole: User Role profile is not the same as the existing user role for `"$($ImportedRole.Name)`" User Role will not be updated" 
            $Valid++
        }
        
        #Check to see if it exists
        If ($Valid -eq 0 -and $Create -eq $False) {
            Write-Host "$ScriptName : validateSCOMUserRole: Updating User Role `"$($UserRoleHash.($ImportedRole.Name).DisplayName)`""
            updateSCOMUserRoleObject -ImportedUserRole $ImportedRole
        }
        elseif ($Valid -eq 0 -and $Create -eq $True) {
            Write-Host "$ScriptName : validateSCOMUserRole: Creating User Role `"$($ImportedRole.Name)`"" 
            createSCOMUserRoleObject -ImportedUserRole $ImportedRole
        }
    }

    function createSCOMUserRoleObject {
        Param ( 
            $ImportedUserRole
        )

        $UserRole = New-Object Microsoft.EnterpriseManagement.Monitoring.Security.MonitoringUserRole
        $UserRole.Name = $ImportedUserRole.Name
        $UserRole.DisplayName = $ImportedUserRole.DisplayName
        $UserRole.Description = $ImportedUserRole.Description

        $Scope = New-Object Microsoft.EnterpriseManagement.Monitoring.Security.MonitoringUserRoleScope
        createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType Objects | ForEach-Object { $Scope.Objects.Add($_) }
        createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType Classes | ForEach-Object { $Scope.Classes.Add($_) }
        createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType Views | ForEach-Object { $Scope.Views.Add($_) }
        createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType NonCredentialTasks | ForEach-Object { $Scope.NonCredentialTasks.Add($_) } 
        createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType CredentialTasks | ForEach-Object { $Scope.CredentialTasks.Add($_) }
        createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType ConsoleTasks | ForEach-Object { $Scope.ConsoleTasks.Add($_) }
        createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType Templates | ForEach-Object { $Scope.Templates.Add($_) }
        createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType DashboardReferences | ForEach-Object { $Scope.DashboardReferences.Add($_) }

        $UserRole.Scope = $Scope
        $UserRole.Profile = $UserProfileHash.($ImportedUserRole.Profile)
        createSCOMUserRoleUserList -ImportedUserRole $ImportedUserRole | Foreach-Object { $UserRole.Users.Add($_) }
        
        insertSCOMUserRoleObject -UserRole $UserRole
    }

    function updateSCOMUserRoleObject {
        Param ( $ImportedUserRole )

        $UserRole = $UserRoleHash.($ImportedUserRole.Name)

        If ($UserRole.IsSystem -eq $true) {
            Write-Warning "$ScriptName : updateSCOMUserRoleObject: User Role `"$($UserRole.Name)`" is System. Users List will not be updated via this script to prevent failure of the management group"
        }
        Else {
            $UserRole.DisplayName = $ImportedUserRole.DisplayName
            $UserRole.Description = $ImportedUserRole.Description

            $UserRole.Scope.Objects.Clear()
            $UserRole.Scope.Classes.Clear()
            $UserRole.Scope.Views.Clear()
            $UserRole.Scope.NonCredentialTasks.Clear()
            $UserRole.Scope.CredentialTasks.Clear()
            $UserRole.Scope.ConsoleTasks.Clear()
            $UserRole.Scope.Templates.Clear()
            $UserRole.Scope.DashboardReferences.Clear()

            createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType Objects | ForEach-Object { $UserRole.Scope.Objects.Add($_) }
            createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType Classes | ForEach-Object { $UserRole.Scope.Classes.Add($_) }
            createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType Views | ForEach-Object { $UserRole.Scope.Views.Add($_) }
            createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType NonCredentialTasks | ForEach-Object { $UserRole.Scope.NonCredentialTasks.Add($_) } 
            createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType CredentialTasks | ForEach-Object { $UserRole.Scope.CredentialTasks.Add($_) }
            createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType ConsoleTasks | ForEach-Object { $UserRole.Scope.ConsoleTasks.Add($_) }
            createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType Templates | ForEach-Object { $UserRole.Scope.Templates.Add($_) }
            createSCOMUserRoleScopeObjects -ImportedUserRole $ImportedUserRole -ScopeType DashboardReferences | ForEach-Object { $UserRole.Scope.DashboardReferences.Add($_) }
    
            $UserRole.Users.Clear()
            createSCOMUserRoleUserList -ImportedUserRole $ImportedUserRole | Foreach-Object { $UserRole.Users.Add($_) }

            insertSCOMUserRoleObject -UserRole $UserRole
        }
    }

    function insertSCOMUserRoleObject {
        param (
            $UserRole
        )
        Write-Host "$ScriptName : insertSCOMUserRoleObject: Inserting `"$($UserRole.Name)`" into Management Group `"$($Mg.Name)`" " -ForegroundColor Cyan

        If ($UserRoleHash.($UserRole.Name)) {
            Try {
                $Err = $false
                $UserRole.Update() 
            }
            Catch [Exception] {
                Write-Error $Error[0]
                $Err = $true
            }
            Finally {
                If ($Err -eq $false) {
                    $UserRole
                }
            }   
        } 
        else {
            Try {
                $Err = $false
                $Mg.InsertMonitoringUserRole($UserRole)
            }
            Catch [Exception] {
                Write-Error $Error[0]
                $Err = $true
            }
            Finally {
                If ($Err -eq $false) {
                    $UserRole
                }
            }   
        }
    }
    
    function createSCOMUserRoleScopeObjects {
        Param ( 

            [Parameter(Mandatory = $true)]
            [ValidateSet("Objects", "Classes", "Views", "NonCredentialTasks", "CredentialTasks", "ConsoleTasks", "Templates", "DashboardReferences")]
            $ScopeType,
        
            [Parameter(Mandatory = $true)]
            $ImportedUserRole 
        )

        switch ($ScopeType) {
            Objects { $Pair = $False ; [guid]$AllGuid = "24caf83a-40fd-439c-bc69-ade9693d4c29" ; $Get = "getClass" }
            Classes { $Pair = $False ; [guid]$AllGuid = "55270a70-ac47-c853-c617-236b0cff9b4c" ; $Get = "getClass" }
            Views { $Pair = $True ; [guid]$AllGuid = "7ad9d106-9134-4f44-a11f-aa3ae89b7c4c"  ; $Get = "getView" }
            NonCredentialTasks { $Pair = $True ; [guid]$AllGuid = "1f2b89b6-404d-4b3e-a130-8d037b27ea56"   ; $Get = "getTask" }
            CredentialTasks { $Pair = $True ; $AllGuid = $null  ; $Get = "getTask" }
            ConsoleTasks { $Pair = $False ; [guid]$AllGuid = "563c11f8-3ec9-4a92-a89f-df7b7a533d69"  ; $Get = "getTask" }
            Templates { $Pair = $False ; $AllGuid = $null  ; $Get = "getTemplate" }
            DashboardReferences { $Pair = $False; [guid]$AllGuid = "3a831da8-bdd2-45bd-9139-54e4af531dee"  ; $Get = "getComponentReference" }

            Default { exit }
        }

        Write-Debug "ScopeType = $ScopeType"
        Write-Debug "Pair = $Pair"
        If ($AllGuid -like $null) { Write-Debug "AllGuid = null" } Else { Write-Debug "AllGuid = $Allguid" }
        Write-Debug "Get = $Get"

        If ($Pair -eq $False) {
            $Output = createGUIDListType 
        }
        elseif ($Pair -eq $True) {
            $Output = createGenericArrayType
        }    
    
        # If the scope is set to all groups and overwrite is true
        If ($AllGuid -notlike $null) {
            If ($ImportedUserRole.Scope.$ScopeType.Id -like $AllGuid.ToString()) {
                Write-Verbose "$ScriptName : createSCOMUserRoleScopeObjects: All `"$ScopeType`" Approved"
                $Output.add($AllGuid)
            }
            Else {
                # If the scope is set to overwrite, but is scope to specific groups
                If ($Overwrite -eq $True) {
                    Write-Verbose "$ScriptName : createSCOMUserRoleScopeObjects: Overwriting `"$ScopeType`" Scope for $($ImportedUserRole.Name)"
                    Foreach ($Object in $ImportedUserRole.Scope.$ScopeType) {
                        Remove-Variable Obj -ErrorAction SilentlyContinue
                        Try {
                            $Obj = $MPHash.$($Object.ManagementPackName).$Get($Object.Name)
                        }
                        Catch {
                            Write-Warning "$ScriptName : createSCOMUserRoleScopeObjects: `"$ScopeType`" Not found - `"$($Object.Name)`", Management Pack `"$($Object.ManagementPackName)`""
                        }
                        If ($Obj) {
                            Write-Verbose "$ScriptName : createSCOMUserRoleScopeObjects: Adding `"$ScopeType`" `"$($Obj.Name)`""
                            If ($Pair -eq $false) {
                                $Output.Add($Obj.Id) | Out-Null
                            }
                            elseif ($Pair -eq $true) {
                                $PairObject = createCommonPairType -First $Obj.Id -Second ([System.Convert]::ToBoolean($Object.Second))
                                $Output.Add($PairObject) | Out-Null
                            }
                        }
                    }
                }
                elseif ($Overwrite -eq $False) {
                    # Appends the list of groups with exisitng user role
                    Write-Verbose "$ScriptName : createSCOMUserRoleScopeObjects: Appending `"$ScopeType`" Scope for $($ImportedUserRole.Name)"
        
                    $ObjectHash = @{ }
                    If ($Pair -eq $True) {
                        If ($UserRoleHash.($ImportedUserRole.Name).Scope.$ScopeType.First) {
                            $UserRoleHash.($ImportedUserRole.Name).Scope.$ScopeType.First | ForEach-Object {
                                Write-Debug "Pair = `"true`", Id = `"$($_.guid)`""
                                $ObjectHash.Add($_, $_) | Out-Null
                            }
                        }
                    }
                    elseif ($Pair -eq $false) { 
                        If ($UserRoleHash.($ImportedUserRole.Name).Scope.$ScopeType) {
                            $UserRoleHash.($ImportedUserRole.Name).Scope.$ScopeType | ForEach-Object {
                                Write-Debug "Pair = `"false`", Id = `"$($_.guid)`""
                                $ObjectHash.Add($_, $_) | Out-Null
                            }
                        }
                    }

                    Foreach ($Object in $ImportedUserRole.Scope.$ScopeType) {
                        Remove-Variable Obj -ErrorAction SilentlyContinue
                        Try {
                            $Obj = $MPHash.$($Object.ManagementPackName).$Get($Object.Name)
                        }
                        Catch {
                            Write-Warning "$ScriptName : createSCOMUserRoleScopeObjects: `"$ScopeType`" not found - `"$($Object.Name)`", Management Pack `"$($Object.ManagementPackName)`""
                        }
                        If ($Obj) {
                            Write-Verbose "$ScriptName : createSCOMUserRoleScopeObjects: Adding `"$ScopeType`" `"$($Obj.Name)`""
                            If (!($ObjectHash.($Obj.Id))) {
                                If ($Pair -eq $false) {
                                    $ObjectHash.Add($Obj.Id, $Obj.Id) | Out-Null
                                }
                                elseif ($Pair -eq $true) {
                                    $PairObject = createCommonPairType -First $Obj.Id -Second ([System.Convert]::ToBoolean($Object.Second))
                                    $ObjectHash.Add($Obj.Id, $PairObject) | Out-Null
                                }
                            }
                        }
                    }
                    If ($ObjectHash.Values.count -gt 0) {
                        $ObjectHash.Values | Foreach-Object { 
                            $Output.Add($_) | Out-Null
                        }
                    }
                }
            }
        }
        $Output
    }

    function createSCOMUserRoleUserList {
        Param ($ImportedUserRole)
        
        $Output = createStringListType
        If ($Overwrite -eq $True) {
            Write-Verbose "$ScriptName : createSCOMUserRoleUserList: Overwriting Users from `"$($UserRoleHash.($ImportedUserRole.Name).DisplayName)`""
            ForEach ($User in $UserRolesHash.($ImportedUserRole.Name).Users) {
                Write-Verbose "$ScriptName : createSCOMUserRoleUserList: Removing User - $User"
            }
            If ($ImportedUserRole.Users.Count -gt 0) {
                Write-Verbose "$ScriptName : createSCOMUserRoleUserList: Adding $($ImportedUserRole.Users.Count) Users"
                ForEach ($User in $ImportedUserRole.Users) {
                    Write-Verbose "$ScriptName : createSCOMUserRoleUserList: Adding User - $User"
                    $Output.Add($User)
                }
            }
            Else {
                Write-Verbose "createSCOMUserRoleUserList: No Users to be added found"
            }
        }
        Else {
            $UserHash = @{ }
            ForEach ($User in $UserRolesHash.($ImportedUserRole.Name).Users) {
                $UserHash.Add($User, $User)
            }
            Foreach ($User in $ImportedUserRole.Users) {
                If (!($UserHash.$User)) {
                    Write-Verbose "$ScriptName : createSCOMUserRoleUserList: Adding User - $User"
                    $UserHash.Add($User, $User)
                }                    
            }
            $UserHash.Values | ForEach-Object { $Output.Add($_) }
        }
        $Output
    }

    function main {
        param (
            $ManagementServer,
            $FilePath
        )
    
        $ScriptName = "Import-SCOMUserRoles"
        #Check SCOM Connection (and connect if neccessary)
        $MG = newSCOMManagementGroupConnection $ManagementServer
          
        #Import File
        $ImportedRoles = getSCOMUserRoleExportedConfig -FilePath $FilePath

        # Compile Variables 
        $MPHash = @{ }
        $MG.GetManagementPacks() | Foreach-Object { $MPHash.Add($_.Name, $_) }
        $MPHash.Values | Where-Object displayname -like $null | Foreach-Object { $_.DisplayName = $_.Name }
    
        $Overwrite = $Overwrite
    
        $UserRoleHash = @{ }
        $MG.GetMonitoringUserRoles() | Foreach-Object { $UserRoleHash.add($_.Name, $_) }
        
        $UserProfileHash = @{ }
        $MG.GetMonitoringProfiles() | Foreach-Object { $UserProfileHash.Add($_.Name, $_) }

        #Create or Update User Roles
        importSCOMUserRoles -ImportedRoles $ImportedRoles

    }

    main -ManagementServer $ManagementServer -FilePath $FilePath
}

<#
.SYNOPSIS
    Exports SCOM User Roles to a readable xml format
.DESCRIPTION
    This cmdlet takes the input from the Get-SCOMUserRole and exports it to .xml

    See NOTES for the XML format
.EXAMPLE
    Example 1
    
    PS C:\> $Roles = Get-SCOMUserRole
    PS C:\> Export-SCOMUserRole -UserRoles $Roles -xmlPath C:\Temp\Userroles.xml
    
    Gets all the SCOM User Roles and then exports the configuration to a .XML file 

.EXAMPLE
    Example 2
    
    PS C:\> $Roles = Get-SCOMUserRole
    PS C:\> ForEach ($Role In $Roles){Export-SCOMUserRole -UserRoles $Role -xmlPath "C:\Temp\UserRoles\$($Role.Name).xml"}

    Gets all the SCOM User Roles and then for each role, creates a seperate .xml file
.INPUTS
    [Microsoft.EnterpriseManagement.Security.UserRole[]]
.OUTPUTS
    .xml
.NOTES
    Input .xml format exmple

    The following attributes are not used for the Import-SCOMUserRole:
    
    <UserRole Id ="">   
    <UserRole ImpliedInstance="">   
    <ManagementGroup Id="">   
    <ManagementGroup Name="">   
    <Scope ScopeId="">   
    <Scope IsScopedFixed="">   

    and the following elements for each scope type:

    <DisplayName>
    <ManagementPackDisplayName>
    <Id>

    These are all used for configuration capture and to make the User roles readable. They are not required by the Import-SCOMUserRole, but are generated by the Export-SCOMUserrole
    
    If Cloning roles, ammed the following attributes and parameters

    <UserRole Name="">           This must be unique within a Management Group
    <UserRole IsSystem="">       This must be "False"
    <UserRole Profile="">        This can be changed to one of the following: "Author" , "AdvancedOperator" , "Operator" , "ReadOnlyOperator". Other Profiles have not been tested using this script
    <UserRole DisplayName="">    This is how the profile will look in the Console


    <?xml version="1.0" encoding="UTF-8"?>
    <UserRoles>
        <UserRole Name="Final Operator" Id="4abb669b-8cd6-4e38-b74d-7dbb33db8787" IsSystem="False" Profile="Operator" ImpliedInstanceId="">
            <DisplayName>Final Operator</DisplayName>
            <Description>
            </Description>
            <ManagementGroup Id="6063d62d-91e2-604c-d06c-e4d35801a8aa" Name="Contoso-MG1" />
            <Scope ScopeId="9" IsScopeFixed="False">
            <Objects>
                <Object Name="Microsoft.Windows.Cluster.NodeRole.Group" ManagementPackName="Microsoft.Windows.Cluster.Management.Library" ManagementPackVersion="10.1.0.0">
                <DisplayName>Cluster Roles</DisplayName>
                <ManagementPackDisplayName>Windows Cluster Management Library</ManagementPackDisplayName>
                <Id>ff95b717-0883-3777-f3dd-160627395c69</Id>
                </Object>
            </Objects>
            <Classes />
            <Views>
                <View Name="Microsoft.Linux.NetworkAdapter.Health.DashboardView" ManagementPackName="Microsoft.Linux.Library" ManagementPackVersion="7.5.1070.0" Second="False">
                <DisplayName>Network Adapter Health</DisplayName>
                <ManagementPackDisplayName>Linux Operating System Library</ManagementPackDisplayName>
                <Id>03178a99-fa14-94db-5f7d-0026a99bfa11</Id>
                </View>
            </Views>
            <NonCredentialTasks>
                <NonCredentialTask Name="Microsoft.Windows.Server.AD.DomainController.DCDIAG" ManagementPackName="Microsoft.Windows.Server.AD.2016.Monitoring" ManagementPackVersion="10.0.0.0" Second="False">
                <DisplayName>DCDIAG</DisplayName>
                <ManagementPackDisplayName>Active Directory Domain Services for Microsoft Windows Server 2016 (Monitoring)</ManagementPackDisplayName>
                <Id>b7d29cac-a806-0b58-be4c-0e36ed8d8242</Id>
                </NonCredentialTask>
            </NonCredentialTasks>
            <CredentialTasks>
            </CredentialTasks>
            <ConsoleTasks>
                <ConsoleTask Name="" ManagementPackName="" ManagementPackVersion="">
                <DisplayName>All Console Tasks Automatically Approved</DisplayName>
                <ManagementPackDisplayName>
                </ManagementPackDisplayName>
                <Id>563c11f8-3ec9-4a92-a89f-df7b7a533d69</Id>
                </ConsoleTask>
            </ConsoleTasks>
            <Templates>
            </Templates>
            <DashboardReferences>
                <DashboardReference Name="Microsoft.SystemCenter.OperationsManager.ViewFolder.Root.SCOMTrendDashboard" ManagementPackName="Microsoft.SystemCenter.OperationsManager.SummaryDashboard" ManagementPackVersion="7.2.12213.0">
                <DisplayName>Management Group Health Trend</DisplayName>
                <ManagementPackDisplayName>Microsoft SystemCenter OperationsManager Summary Dashboard</ManagementPackDisplayName>
                <Id>da19a29a-a198-bc89-6c5b-02d50ee1ba1d</Id>
                </DashboardReference>
            </DashboardReferences>
            </Scope>
            <Users>
            <User>Contoso\JWilliams</User>
            <User>Contoso\TMiller</User>
            </Users>
        </UserRole>
    </UserRoles>

#>
function Export-SCOMUserRole {
    [CmdletBinding()]
    param (  
        [Parameter(Mandatory = $true)] 
        [Microsoft.EnterpriseManagement.Security.UserRole[]]
        $UserRoles,

        [Parameter(Mandatory = $true,
            ParameterSetName = 'XMLOutputSet')]
        [String]
        $XMLPath
    )

    function createListType {
        New-Object System.Collections.Generic.List[System.Object]
    }

    function newSCOMManagementGroupConnection {
        param (    
            [AllowNull()]
            $ManagementServer = $null
        )
        #Import the OperationsManager module
        if (!(Get-Module OperationsManager)) {
            try {
                $SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
                $SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager" -ErrorAction Stop
                Import-module $SCOMModulePath -ErrorAction Stop
                #[Reflection.Assembly]::LoadWithPartialName("Microsoft.EnterpriseManagement.Core") |Out-Null
                #[Reflection.Assembly]::LoadWithPartialName("Microsoft.EnterpriseManagement.Packaging")|Out-Null
            }
            catch {
                try {
                    Import-Module OperationsManager -ErrorAction Stop
                }
                catch {
                    Write-Error "Failed to Load the Operations Manager Module. Ending Script"
                    exit
                }
            }
        }

        #Connect to SCOM Management Group    
        if ($ManagementServer -like $Null) {
            $Wmi = Get-WmiObject win32_ComputerSystem
            $ManagementServer = "$($Wmi.Name).$($Wmi.Domain)"
            Write-Verbose "newSCOMManagementGroupConnection: ManagementServer Parameter not provided. Set as ManagementServer"
        }
        if ((Get-SCOMManagementGroupConnection -ComputerName $ManagementServer).IsActive -ne $True) {
            try {
                New-SCOMManagementGroupConnection $ManagementServer -ErrorAction Stop
            }
            catch {
                $ErrorString = "Failed to Connect to SCOM Management Server: $ManagementServer"
                Write-error $ErrorString
                exit
            }
        }
        New-Object Microsoft.EnterpriseManagement.ManagementGroup($ManagementServer)
    }

    function getSCOMUserRoles {
        param (
            [Microsoft.EnterpriseManagement.Security.UserRole[]]
            [AllowNull()]
            $UserRoles
        )
        if ($UserRoles -like $null) {
            Write-Warning -Message "No User Roles defined!`nType Y or N to collect all User Roles"
            $x = Read-Host -Prompt "Y/N"
            switch ($x) {
                'y' { $UserRoles = Get-SCOMUserRole }
                'n' { exit }
                Default { exit }
            }
        }
        $i = 1
        foreach ($UserRole in $UserRoles) {
            getSCOMUserRoleConfiguration -UserRole $UserRole
            Write-Progress -Activity "Collecting User Role Data" -Status "$i of $($UserRoles.Count); $($UserRole.DisplayName)" -PercentComplete ($i / $UserRoles.Count * 100)
            $i++
        }
        Write-Progress -Activity "Collecting User Role Data" -Completed
    }

    function getSCOMUserRoleConfiguration {
        param (
            [Microsoft.EnterpriseManagement.Security.UserRole]
            $UserRole
        )
        New-Object PSObject -Property @{
            Name              = $UserRole.Name ;
            DisplayName       = $UserRole.DisplayName ;
            Description       = $UserRole.Description ;
            Id                = $UserRole.Id ;
            IsSystem          = $UserRole.IsSystem ; 
            IsScopeFixed      = $UserRole.IsScopeFixed ; 
            ScopeId           = $UserRole.ScopeId;
            ImpliedInstanceId = $UserRole.ImpliedInstanceId ; 
            Scope             = getSCOMUserRoleScopeConfiguration -UserRole $UserRole ;
            Profile           = $UserRole.Profile.toString() ; 
            Users             = $UserRole.Users ;
            ManagementGroup   = $UserRole.ManagementGroup.ToString() ;
            ManagementGroupId = $UserRole.ManagementGroupId
        }
    }

    function getSCOMUserRoleScopeConfiguration {
        param (
            [Microsoft.EnterpriseManagement.Security.UserRole]
            $UserRole
        )
        New-Object PSObject -Property @{
            Objects             = getSCOMUserRoleScopeObjects -ScopeType Objects -UserRole $UserRole
            Classes             = getSCOMUserRoleScopeObjects -ScopeType Classes -UserRole $UserRole
            Views               = getSCOMUserRoleScopeObjects -ScopeType Views -UserRole $UserRole
            NonCredentialTasks  = getSCOMUserRoleScopeObjects -ScopeType NonCredentialTasks -UserRole $UserRole
            CredentialTasks     = getSCOMUserRoleScopeObjects -ScopeType CredentialTasks -UserRole $UserRole
            ConsoleTasks        = getSCOMUserRoleScopeObjects -ScopeType ConsoleTasks -UserRole $UserRole
            Templates           = getSCOMUserRoleScopeObjects -ScopeType Templates -UserRole $UserRole
            DashboardReferences = getSCOMUserRoleScopeObjects -ScopeType DashboardReferences -UserRole $UserRole
        }
    }

    function getSCOMUserRoleScopeObjects {
        param (
            [Parameter(Mandatory = $true)]
            [ValidateSet("Objects", "Classes", "Views", "NonCredentialTasks", "CredentialTasks", "ConsoleTasks", "Templates", "DashboardReferences")]
            $ScopeType,
            
            [Parameter(Mandatory = $true)]
            [Microsoft.EnterpriseManagement.Security.UserRole]
            $UserRole
        )
    
        switch ($ScopeType) {
            Objects { $Pair = $False ; [guid]$AllGuid = "24caf83a-40fd-439c-bc69-ade9693d4c29" ; $Get = "GetMonitoringClass" }
            Classes { $Pair = $False ; [guid]$AllGuid = "55270a70-ac47-c853-c617-236b0cff9b4c" ; $Get = "GetMonitoringClass" }
            Views { $Pair = $True ; [guid]$AllGuid = "7ad9d106-9134-4f44-a11f-aa3ae89b7c4c"  ; $Get = "GetMonitoringView" }
            NonCredentialTasks { $Pair = $True ; [guid]$AllGuid = "1f2b89b6-404d-4b3e-a130-8d037b27ea56"   ; $Get = "GetMonitoringTask" }
            CredentialTasks { $Pair = $True ; $AllGuid = $null  ; $Get = "GetMonitoringTask" }
            ConsoleTasks { $Pair = $False ; [guid]$AllGuid = "563c11f8-3ec9-4a92-a89f-df7b7a533d69"  ; $Get = "GetMonitoringConsoleTask" }
            Templates { $Pair = $False ; $AllGuid = $null  ; $Get = "GetMonitoringTemplate" }
            DashboardReferences { $Pair = $False; [guid]$AllGuid = "3a831da8-bdd2-45bd-9139-54e4af531dee"  ; $Get = "getComponentReference" }
    
            Default { exit }
        }
        
        $Output = createListType

        $AllTest = $False
        if ($Pair -eq $False) {
            if ($UserRole.Scope.$ScopeType -eq $AllGuid) {
                $AllTest = $True
            }
        }
        else {
            if ($UserRole.Scope.$ScopeType.First -eq $AllGuid) {
                $AllTest = $True
            }
        }

        if ($AllTest -eq $True) {
            Write-Verbose "getSCOMUserRoleScopeObject: All $ScopeType Automatically Approved"
            $Obj = New-Object PSCustomObject -Property @{
                Name                      = $null
                DisplayName               = "All $ScopeType Automatically Approved"
                ManagementPackName        = $null
                ManagementPackDisplayName = $null
                ManagementPackVersion     = $null
                Id                        = $AllGuid
            }
            $Output.Add($Obj)
        }
        elseif ($UserRole.Scope.$ScopeType -notlike $null) {
            Foreach ($UserRoleScopeObject in $UserRole.Scope.$ScopeType) {
                Remove-Variable Object -ErrorAction SilentlyContinue
                if ($ScopeType -like "DashboardReferences") {
                    $Object = $DashboardHash.$UserRoleScopeObject
                }
                elseif ($Pair -eq $true) {
                    $Object = $MG.$Get($UserRoleScopeObject.First)
                }
                else {
                    $Object = $MG.$Get($UserRoleScopeObject)
                }
                Write-Verbose "getSCOMUserRoleScopeObjects: $($UserRoleScopeObject.DisplayName)"
    
                $ObjHash = @{
                    Name                      = $Object.Name
                    DisplayName               = if ($Object.DisplayName) { $Object.DisplayName } else { $Object.Name }
                    ManagementPackName        = $Object.Identifier.Domain[0]
                    ManagementPackDisplayName = if ($MPHash.$($Object.Identifier.Domain[0]).DisplayName) { $MPHash.$($Object.Identifier.Domain[0]).DisplayName }else { $Object.Identifier.Domain[0] }
                    ManagementPackVersion     = $MPHash.$($Object.Identifier.Domain[0]).Version.ToString()
                    Id                        = $Object.Id
                }
                if ($Pair -eq $true) {
                    $ObjHash.Add("Second", $UserRoleScopeObject.Second.ToString())
                }
                $Obj = New-Object PSObject -Property $ObjHash
                $Output.Add($Obj)
            }
        }
        $Output
    }
    function convertSCOMUserRoleToXML {
        param (
            $UserRoles,
            $Filepath
        )
    
        [xml]$Doc = New-Object System.Xml.XmlDocument
    
        $dec = $Doc.CreateXmlDeclaration("1.0", "UTF-8", $null)
        $Doc.AppendChild($dec) | Out-Null
    
        $xmlUserRoles = $Doc.CreateElement("UserRoles")
        $Doc.AppendChild($xmlUserRoles) | Out-Null
    
        Foreach ($UserRole in $UserRoles) {
            $xmlUserRole = $Doc.CreateElement("UserRole")
            $xmlUserRoles.AppendChild($xmlUserRole) | Out-Null
            $xmlUserRole.SetAttribute("Name", $UserRole.Name) | Out-Null
            $xmlUserRole.SetAttribute("Id", $UserRole.Id) | Out-Null
            $xmlUserRole.SetAttribute("IsSystem", $UserRole.IsSystem) | Out-Null
            $xmlUserRole.SetAttribute("Profile", $UserRole.Profile) | Out-Null
            $xmlUserRole.SetAttribute("ImpliedInstanceId", $UserRole.ImpliedInstanceId) | Out-Null
        
            $xmlUserRoleDisplayName = $Doc.CreateElement("DisplayName")
            $xmlUserRoleDisplayName.AppendChild($Doc.CreateTextNode($UserRole.DisplayName)) | Out-Null
            $xmlUserRole.AppendChild($xmlUserRoleDisplayName) | Out-Null
       
            $xmlUserRoleDescription = $Doc.CreateElement("Description") 
            $xmlUserRoleDescription.AppendChild($Doc.CreateTextNode($UserRole.Description)) | Out-Null
            $xmlUserRole.AppendChild($xmlUserRoleDescription) | Out-Null
       
            $xmlUserRoleManagementGroup = $Doc.CreateElement("ManagementGroup")
            $xmlUserRoleManagementGroup.SetAttribute("Id", $UserRole.ManagementGroupId) | Out-Null
            $xmlUserRoleManagementGroup.SetAttribute("Name", $UserRole.ManagementGroup) | Out-Null
            $xmlUserRole.AppendChild($xmlUserRoleManagementGroup) | Out-Null

            # Scope Start
            $xmlUserRoleScope = $Doc.CreateElement("Scope")
            $xmlUserRoleScope.SetAttribute("ScopeId", $UserRole.ScopeId) | Out-Null
            $xmlUserRoleScope.SetAttribute("IsScopeFixed", $UserRole.IsScopeFixed) | Out-Null
            $xmlUserRole.AppendChild($xmlUserRoleScope) | Out-Null
    
            # Objects
            $xmlUserRoleScopeObjects = $Doc.CreateElement("Objects")
            $xmlUserRoleScope.AppendChild($xmlUserRoleScopeObjects) | Out-Null
            Foreach ($Obj in $UserRole.Scope.Objects) {
                $Object = $Doc.CreateElement("Object")
                $Object.SetAttribute("Name", $Obj.Name) | Out-Null
                $Object.SetAttribute("ManagementPackName", $Obj.ManagementPackName) | Out-Null
                $Object.SetAttribute("ManagementPackVersion", $Obj.ManagementPackVersion) | Out-Null
    
                $ObjectDisplayName = $Doc.CreateElement("DisplayName")
                $ObjectDisplayName.AppendChild($Doc.CreateTextNode($Obj.DisplayName)) | Out-Null
                $Object.AppendChild($ObjectDisplayName) | Out-Null
    
                $ObjectManagementPackDisplayName = $Doc.CreateElement("ManagementPackDisplayName")
                $ObjectManagementPackDisplayName.AppendChild($Doc.CreateTextNode($Obj.ManagementPackDisplayName)) | Out-Null
                $Object.AppendChild($ObjectManagementPackDisplayName) | Out-Null
    
                $ObjectId = $Doc.CreateElement("Id")
                $ObjectId.AppendChild($Doc.CreateTextNode($Obj.Id)) | Out-Null
                $Object.AppendChild($ObjectId) | Out-Null
    
                $xmlUserRoleScopeObjects.AppendChild($Object) | Out-Null
            }   
      
            # Classes
            $xmlUserRoleScopeClasses = $Doc.CreateElement("Classes")
            $xmlUserRoleScope.AppendChild($xmlUserRoleScopeClasses) | Out-Null
            Foreach ($Obj in $UserRole.Scope.Classes) {
                $Class = $Doc.CreateElement("Class")
                $Class.SetAttribute("Name", $Obj.Name) | Out-Null
                $Class.SetAttribute("ManagementPackName", $Obj.ManagementPackName) | Out-Null
                $Class.SetAttribute("ManagementPackVersion", $Obj.ManagementPackVersion) | Out-Null
    
                $ClassDisplayName = $Doc.CreateElement("DisplayName")
                $ClassDisplayName.AppendChild($Doc.CreateTextNode($Obj.DisplayName)) | Out-Null
                $Class.AppendChild($ClassDisplayName) | Out-Null
    
                $ClassManagementPackDisplayName = $Doc.CreateElement("ManagementPackDisplayName")
                $ClassManagementPackDisplayName.AppendChild($Doc.CreateTextNode($Obj.ManagementPackDisplayName)) | Out-Null
                $Class.AppendChild($ClassManagementPackDisplayName) | Out-Null
    
                $ClassId = $Doc.CreateElement("Id")
                $ClassId.AppendChild($Doc.CreateTextNode($Obj.Id)) | Out-Null
                $Class.AppendChild($ClassId) | Out-Null
    
                $xmlUserRoleScopeClasses.AppendChild($Class) | Out-Null
            }    
    
            # Views
            $xmlUserRoleScopeViews = $Doc.CreateElement("Views")
            $xmlUserRoleScope.AppendChild($xmlUserRoleScopeViews) | Out-Null
            Foreach ($Obj in $UserRole.Scope.Views) {
                $View = $Doc.CreateElement("View")
                $View.SetAttribute("Name", $Obj.Name) | Out-Null
                $View.SetAttribute("ManagementPackName", $Obj.ManagementPackName) | Out-Null
                $View.SetAttribute("ManagementPackVersion", $Obj.ManagementPackVersion) | Out-Null
                $View.SetAttribute("Second", $Obj.Second) | Out-Null
    
                $ViewDisplayName = $Doc.CreateElement("DisplayName")
                $ViewDisplayName.AppendChild($Doc.CreateTextNode($Obj.DisplayName)) | Out-Null
                $View.AppendChild($ViewDisplayName) | Out-Null
    
                $ViewManagementPackDisplayName = $Doc.CreateElement("ManagementPackDisplayName")
                $ViewManagementPackDisplayName.AppendChild($Doc.CreateTextNode($Obj.ManagementPackDisplayName)) | Out-Null
                $View.AppendChild($ViewManagementPackDisplayName) | Out-Null
    
                $ViewId = $Doc.CreateElement("Id")
                $ViewId.AppendChild($Doc.CreateTextNode($Obj.Id)) | Out-Null
                $View.AppendChild($ViewId) | Out-Null
    
                $xmlUserRoleScopeViews.AppendChild($View) | Out-Null
            }    
    
            # NonCredentialTasks
            $xmlUserRoleScopeNonCredentialTasks = $Doc.CreateElement("NonCredentialTasks")
            $xmlUserRoleScope.AppendChild($xmlUserRoleScopeNonCredentialTasks) | Out-Null
            Foreach ($Obj in $UserRole.Scope.NonCredentialTasks) {
                $NonCredentialTask = $Doc.CreateElement("NonCredentialTask")
                $NonCredentialTask.SetAttribute("Name", $Obj.Name) | Out-Null
                $NonCredentialTask.SetAttribute("ManagementPackName", $Obj.ManagementPackName) | Out-Null
                $NonCredentialTask.SetAttribute("ManagementPackVersion", $Obj.ManagementPackVersion) | Out-Null
                $NonCredentialTask.SetAttribute("Second", $Obj.Second) | Out-Null
        
                $NonCredentialTaskDisplayName = $Doc.CreateElement("DisplayName")
                $NonCredentialTaskDisplayName.AppendChild($Doc.CreateTextNode($Obj.DisplayName)) | Out-Null
                $NonCredentialTask.AppendChild($NonCredentialTaskDisplayName) | Out-Null
        
                $NonCredentialTaskManagementPackDisplayName = $Doc.CreateElement("ManagementPackDisplayName")
                $NonCredentialTaskManagementPackDisplayName.AppendChild($Doc.CreateTextNode($Obj.ManagementPackDisplayName)) | Out-Null
                $NonCredentialTask.AppendChild($NonCredentialTaskManagementPackDisplayName) | Out-Null
        
                $NonCredentialTaskId = $Doc.CreateElement("Id")
                $NonCredentialTaskId.AppendChild($Doc.CreateTextNode($Obj.Id)) | Out-Null
                $NonCredentialTask.AppendChild($NonCredentialTaskId) | Out-Null
        
                $xmlUserRoleScopeNonCredentialTasks.AppendChild($NonCredentialTask) | Out-Null
            }    
    
            # CredentialTasks
            $xmlUserRoleScopeCredentialTasks = $Doc.CreateElement("CredentialTasks")
            $xmlUserRoleScope.AppendChild($xmlUserRoleScopeCredentialTasks) | Out-Null
            Foreach ($Obj in $UserRole.Scope.CredentialTasks) {
                $CredentialTask = $Doc.CreateElement("CredentialTask")
                $CredentialTask.SetAttribute("Name", $Obj.Name) | Out-Null
                $CredentialTask.SetAttribute("ManagementPackName", $Obj.ManagementPackName) | Out-Null
                $CredentialTask.SetAttribute("ManagementPackVersion", $Obj.ManagementPackVersion) | Out-Null
                $CredentialTask.SetAttribute("Second", $Obj.Second) | Out-Null
        
                $CredentialTaskDisplayName = $Doc.CreateElement("DisplayName")
                $CredentialTaskDisplayName.AppendChild($Doc.CreateTextNode($Obj.DisplayName)) | Out-Null
                $CredentialTask.AppendChild($CredentialTaskDisplayName) | Out-Null
        
                $CredentialTaskManagementPackDisplayName = $Doc.CreateElement("ManagementPackDisplayName")
                $CredentialTaskManagementPackDisplayName.AppendChild($Doc.CreateTextNode($Obj.ManagementPackDisplayName)) | Out-Null
                $CredentialTask.AppendChild($CredentialTaskManagementPackDisplayName) | Out-Null
        
                $CredentialTaskId = $Doc.CreateElement("Id")
                $CredentialTaskId.AppendChild($Doc.CreateTextNode($Obj.Id)) | Out-Null
                $CredentialTask.AppendChild($CredentialTaskId) | Out-Null
        
                $xmlUserRoleScopeCredentialTasks.AppendChild($CredentialTask) | Out-Null
            } 
    
            # ConsoleTasks
            $xmlUserRoleScopeConsoleTasks = $Doc.CreateElement("ConsoleTasks")
            $xmlUserRoleScope.AppendChild($xmlUserRoleScopeConsoleTasks) | Out-Null
            Foreach ($Obj in $UserRole.Scope.ConsoleTasks) {
                $ConsoleTask = $Doc.CreateElement("ConsoleTask")
                $ConsoleTask.SetAttribute("Name", $Obj.Name) | Out-Null
                $ConsoleTask.SetAttribute("ManagementPackName", $Obj.ManagementPackName) | Out-Null
                $ConsoleTask.SetAttribute("ManagementPackVersion", $Obj.ManagementPackVersion) | Out-Null
    
                $ConsoleTaskDisplayName = $Doc.CreateElement("DisplayName")
                $ConsoleTaskDisplayName.AppendChild($Doc.CreateTextNode($Obj.DisplayName)) | Out-Null
                $ConsoleTask.AppendChild($ConsoleTaskDisplayName) | Out-Null
    
                $ConsoleTaskManagementPackDisplayName = $Doc.CreateElement("ManagementPackDisplayName")
                $ConsoleTaskManagementPackDisplayName.AppendChild($Doc.CreateTextNode($Obj.ManagementPackDisplayName)) | Out-Null
                $ConsoleTask.AppendChild($ConsoleTaskManagementPackDisplayName) | Out-Null
    
                $ConsoleTaskId = $Doc.CreateElement("Id")
                $ConsoleTaskId.AppendChild($Doc.CreateTextNode($Obj.Id)) | Out-Null
                $ConsoleTask.AppendChild($ConsoleTaskId) | Out-Null
    
                $xmlUserRoleScopeConsoleTasks.AppendChild($ConsoleTask) | Out-Null
            }
    
            # Templates
            $xmlUserRoleScopeTemplates = $Doc.CreateElement("Templates")
            $xmlUserRoleScope.AppendChild($xmlUserRoleScopeTemplates) | Out-Null
            Foreach ($Obj in $UserRole.Scope.Templates) {
                $Template = $Doc.CreateElement("Template")
                $Template.SetAttribute("Name", $Obj.Name) | Out-Null
                $Template.SetAttribute("ManagementPackName", $Obj.ManagementPackName) | Out-Null
                $Template.SetAttribute("ManagementPackVersion", $Obj.ManagementPackVersion) | Out-Null
    
                $TemplateDisplayName = $Doc.CreateElement("DisplayName")
                $TemplateDisplayName.AppendChild($Doc.CreateTextNode($Obj.DisplayName)) | Out-Null
                $Template.AppendChild($TemplateDisplayName) | Out-Null
    
                $TemplateManagementPackDisplayName = $Doc.CreateElement("ManagementPackDisplayName")
                $TemplateManagementPackDisplayName.AppendChild($Doc.CreateTextNode($Obj.ManagementPackDisplayName)) | Out-Null
                $Template.AppendChild($TemplateManagementPackDisplayName) | Out-Null
    
                $TemplateId = $Doc.CreateElement("Id")
                $TemplateId.AppendChild($Doc.CreateTextNode($Obj.Id)) | Out-Null
                $Template.AppendChild($TemplateId) | Out-Null
    
                $xmlUserRoleScopeTemplates.AppendChild($Template) | Out-Null
            }    
    
            # Dashboard Reference
            $xmlUserRoleScopeDashboardReferences = $Doc.CreateElement("DashboardReferences")
            $xmlUserRoleScope.AppendChild($xmlUserRoleScopeDashboardReferences) | Out-Null
            Foreach ($Obj in $UserRole.Scope.DashboardReferences) {
                $DashboardReference = $Doc.CreateElement("DashboardReference")
                $DashboardReference.SetAttribute("Name", $Obj.Name) | Out-Null
                $DashboardReference.SetAttribute("ManagementPackName", $Obj.ManagementPackName) | Out-Null
                $DashboardReference.SetAttribute("ManagementPackVersion", $Obj.ManagementPackVersion) | Out-Null
    
                $DashboardReferenceDisplayName = $Doc.CreateElement("DisplayName")
                $DashboardReferenceDisplayName.AppendChild($Doc.CreateTextNode($Obj.DisplayName)) | Out-Null
                $DashboardReference.AppendChild($DashboardReferenceDisplayName) | Out-Null
    
                $DashboardReferenceManagementPackDisplayName = $Doc.CreateElement("ManagementPackDisplayName")
                $DashboardReferenceManagementPackDisplayName.AppendChild($Doc.CreateTextNode($Obj.ManagementPackDisplayName)) | Out-Null
                $DashboardReference.AppendChild($DashboardReferenceManagementPackDisplayName) | Out-Null
    
                $DashboardReferenceId = $Doc.CreateElement("Id")
                $DashboardReferenceId.AppendChild($Doc.CreateTextNode($Obj.Id)) | Out-Null
                $DashboardReference.AppendChild($DashboardReferenceId) | Out-Null
    
                $xmlUserRoleScopeDashboardReferences.AppendChild($DashboardReference) | Out-Null
            }    
    
            # Scope End
    
            $xmlUserRoleUsers = $Doc.CreateElement("Users")
            $xmlUserRole.AppendChild($xmlUserRoleUsers) | Out-Null
    
            Foreach ($User in $UserRole.Users) {
                $xmlUserRoleUser = $Doc.CreateElement("User")
                $xmlUserRoleUser.AppendChild($Doc.CreateTextNode($User)) | Out-Null
                $xmlUserRoleUsers.AppendChild($xmlUserRoleUser) | Out-Null
            }
        }
    
        try {
            $Doc.Save($Filepath)
        }
        catch [Exception] {
            Write-Error $Error[0]
            exit
        }
    }
    
    function main {

        $ScriptName = "Export-SCOMUserRole"
        Write-Verbose "$ScriptName : `"$($UserRoles.Count)`" User Role(s)"
    
        # Check SCOM Connection (and connect if neccessary)
        $MG = newSCOMManagementGroupConnection $ManagementServer

        # Compile Variables 
        $MPHash = @{ }
        $MG.GetManagementPacks() | ForEach-Object { $MPHash.Add($_.Name, $_) }
        $MPHash.Values | Where-Object displayname -like $null | ForEach-Object { $_.DisplayName = $_.Name }
    
        $DashboardHash = @{ }
        $MG.Dashboard.GetScopedDashboardComponentReferences() | ForEach-Object { $DashboardHash.add($_.id, $_) }

        # Get SCOM UserRole Configuration
        $Output = getSCOMUserRoles -UserRoles $UserRoles

        # Output Configuration
        convertSCOMUserRoleToXML -UserRoles $Output -FilePath $XMLPath 

        $Output
        Write-Verbose "Export-SCOMUserRoles Complete"
    }

    main 
}
